<?php

/**
 * @file
 * Preprocesses for all paragraphs.
 */

/**
 * Implements template_preprocess_hook().
 */
function base_preprocess_paragraph(&$variables, $hook) {
  // Always have an `classes` key, even if it is empty
  $variables['classes'] = $variables['classes'] ?? [];

  // Create the possibility to use more specific preprocess
  // function for more specific paragraphs.
  $function = __FUNCTION__ . '__' . $variables['paragraph']->getType();
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}

/**
 * Base_preprocess_field().
 *
 * Implements template_preprocess_hook().
 *
 * Adds the following paragraph values to paragraph items
 * - **index** <int>: the index of the paragraph in relation with the parent
 *   element
 * - **paragraph_type** <string>: The paragraph type of the current element
 * - **previous_paragraph_type** <string>: The paragraph type of the previous
 *   element
 * - **next_paragraph_type** <string>: The paragraph type of the next element
 * - **group_index** <int>: The index number of related paragraph types grouped
 *   together
 */
function base_preprocess_field(&$variables) {
  $groupIndex = 0;
  foreach ($variables['items'] as $index => $item) {
    $paragraph = &$variables['items'][$index]['content']['#paragraph'];

    if (!isset($paragraph)) {
      continue;
    }

    $paragraph->index = $index;
    $paragraph->paragraph_type = $paragraph->bundle() ?? '';

    $previousParagraph = $variables['items'][$index - 1]['content']['#paragraph'] ?? NULL;
    $paragraph->previous_paragraph_type = isset($previousParagraph) ? $previousParagraph->bundle() : '';

    $nextParagraph = $variables['items'][$index + 1]['content']['#paragraph'] ?? NULL;
    $paragraph->next_paragraph_type = isset($nextParagraph) ? $nextParagraph->bundle() : '';

    if ($paragraph->paragraph_type !== $paragraph->previous_paragraph_type) {
      $groupIndex++;
    }

    $paragraph->group_index = $groupIndex;
  }
}
